{"name":"Effective-recycler-adapter","tagline":"An Advanced RecyclerView Adapter","body":"What is it?\r\n-----------\r\nSmall and lightweight extensions to `RecycerView.Adpter` which adds missing `ListView` and `GridView`\r\nfeatures to `RecyclerView`\r\n\r\nUsage\r\n-----\r\n\r\nYou need to extend `EffectiveRecyclerAdapter` in order to get the benefits of this library.\r\n\r\n### MultiChoiceMode\r\n\r\nMultiChoiceMode is customizable and very easy to use. You just need to set the `MultiChoiceModeListener` with `setMultiChoiceModeListener` method. MultiChoiceModeListener has few important callbacks like\r\n```java\r\n@Override\r\npublic void onItemSelectionChanged(ActionMode mode, int position, boolean selected) {\r\n    // Called when selection is changed at position index.\r\n}\r\n\r\n@Override\r\npublic boolean onCreateActionMode(ActionMode mode, MenuInflater inflater, Menu menu) {\r\n    // On Create Action Mode, Inflate the menu.\r\n    inflater.inflate(R.menu.menu_action, menu);\r\n    return true;\r\n}\r\n\r\n@Override\r\npublic void onDestroyActionMode() {\r\n    // Action mode destroyed.\r\n}\r\n    \r\n@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n    // Action menu item is clicked\r\n    return true;\r\n}\r\n````\r\nYou decide when you need your Item's selection state to be changed. For example, here's a `ViewHolder` implementation which toggles selection states on `onClick` and `onLongClick` events.\r\n```java\r\nclass MyViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener {\r\n\r\n    public MyViewHolder(TextView itemView) {\r\n       super(itemView);\r\n       itemView.setOnClickListener(this);\r\n       itemView.setOnLongClickListener(this);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        // You decide when Selected state should be change\r\n        if (mMyAdapter.isActionModeActive()) {\r\n            mMyAdapter.toggleSelected(getAdapterPosition());\r\n        } else {\r\n            // Do normal onclick action\r\n        } \r\n    }\r\n\r\n    @Override\r\n    public boolean onLongClick(View v) {\r\n        // You decide when Selected state should be change\r\n        mMyAdapter.toggleSelected(getAdapterPosition());\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n\r\nYou can check if item is selected in your `Adapter`'s `onBindViewHolder` method and change view according to it.\r\n```java\r\n@Override\r\npublic void onBindViewHolder(MyViewHolder holder, int position) {\r\n    // Check if item is selected and set the appropriate view\r\n    holder.item.setBackgroundColor(isSelected(position) ? Color.GRAY : Color.WHITE);\r\n}\r\n```\r\n\r\nUpcoming\r\n--------\r\n\r\n- Header and Footer View support\r\n- Pluggable view types support through delegate\r\n- onItemClick and onItemLongClick Listener\r\n- a lot more...\r\n\r\nHow do I get it?\r\n----------------\r\n\r\n###Maven\r\n```xml\r\n<dependency>\r\n  <groupId>com.jimmy.effective-recycler-adapter</groupId>\r\n  <artifactId>effective-recycler-adapter</artifactId>\r\n  <version>1.0.1</version>\r\n</dependency>\r\n```\r\n\r\n###Gradle\r\n```groovy\r\ncompile 'com.jimmy.effective-recycler-adapter:effective-recycler-adapter:1.0.1'\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}